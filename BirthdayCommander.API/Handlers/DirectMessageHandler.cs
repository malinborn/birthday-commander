using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Text;
using BirthdayCommander.Core.Entities;
using BirthdayCommander.Core.Interfaces;
using BirthdayCommander.Core.Interfaces.Handlers;
using BirthdayCommander.Core.Models.BotCommands;
using BirthdayCommander.Core.Models.Mattermost;

namespace BirthdayCommander.Handlers;

public class DirectMessageHandler(
    IMessageParser messageParser,
    IEmployeeService employeeService,
    ISubscriptionService subscriptionService,
    IMattermostService mattermostService,
    ILogger<DirectMessageHandler> logger)
    : IDirectMessageHandler
{

    public async Task HandleDirectMessage(string userId, string channelId, string message)
    {
        try
        {
            if (string.IsNullOrEmpty(userId))
            {
                throw new ArgumentException($"UserId cannot be null or empty");
            }
            var mattermostUser = await mattermostService.GetUserByIdAsync(userId)!
                                 ?? throw new ArgumentException($"User with id {userId} not found");

            var employee = await employeeService.GetOrCreate(mattermostUser.Email, userId);
            
            logger.LogInformation("Processing message from {Email}: {Message}", mattermostUser.Email, message);

            var command = messageParser.Parse(message);

            // Console.WriteLine(command.Type.ToString());
            // Console.WriteLine(command.RawMessage);
            // Console.WriteLine(employee.Email);
            // for (var i = 0; i < command.Parameters.Count; i++)
            // {
            //     Console.WriteLine($"[{i}] - {command.Parameters[i]}");
            // }
            
            var response = await HandleCommand(command, employee, mattermostUser.Email);
            
            await SendResponse(channelId, response);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw new Exception("Error while processing message", e);
        }
    }
    
    private async Task SendResponse(string channelId, string message)
    {
        try
        {
            await mattermostService.SendMessageAsync(channelId, message);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Failed to send response to channel {ChannelId}", channelId);
        }
    }

    private async Task<string> HandleCommand(MessageCommand command, Employee employee, string userEmail)
    {
        try
        {
            return command.Type switch
            {
                CommandType.Subscribe => await HandleSubscribe(userEmail, command.Parameters),
                CommandType.ShowSubscriptions => await HandleShowSubscriptions(employee.Id),
                CommandType.ShowSubscribers => await HandleShowSubscribers(employee.Id),
                CommandType.SetWishlist => await HandleSetWishlist(employee.Id, command.Parameters[0]),
                CommandType.SetBirthday => await HandleSetBirthday(employee.Id, command.Parameters[0]),
                CommandType.Unsubscribe => await HandleUnsubscribe(userEmail, command.Parameters),
                _ => GetHelpText()
            };
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error handling command {CommandType}", command.Type);
            return "‚ùå An unexpected error occurred. Please try again later.";
        }
    }
    
    private async Task<string> HandleSubscribe(string subscriberEmail, List<string> targetEmails)
    {
        var results = new List<string>();
        var successCount = 0;

        foreach (var email in targetEmails)
        {
            var success = await subscriptionService.Subscribe(subscriberEmail, email);

            if (success)
            {
                results.Add($"‚úÖ Subscribed to **{email}**");
                successCount++;
            }
            else
            {
                results.Add($"‚ùå Could not subscribe to **{email}** (user not found or birthday not set)");
            }
        }

        var summary = successCount > 0 
            ? $"\n‚ú® Successfully subscribed to {successCount} birthday{(successCount > 1 ? "s" : "")}!"
            : "\n‚ö†Ô∏è No subscriptions were created.";

        return string.Join("\n", results) + summary;
    }

    private string GetHelpText()
    {
        return @"##### üéÇ **Birthday Commander Bot**
–Ø –ø–æ–º–æ–≥–∞—é –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥—Ä—É–ª–ª–µ–≥ –∏ —Å–æ–±–∏—Ä–∞—é –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –≤–º–µ—Å—Ç–µ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –≤–º–µ—Å—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ —Ö–∏—Ç—Ä–æ–π –∑–∞—Å–∞–¥–µ –Ω–∞ –¥–µ–π–ª–∏–∫–µ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! 
–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:

**üìß –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:
- `john.doe@example.com`
- `jane@example.com, bob@example.com` _(–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É)_

**üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è**
–°–æ–æ–±—â–∏—Ç–µ –º–Ω–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:
- `31.12.1990` _(—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ–¥–∞)_

**üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏**
- `–ø–æ–¥–ø–∏—Å–∫–∏` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—å–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ

**üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤**
- `–ø–æ–¥–ø–∏—Å—á–∏–∫–∏` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è

**üéÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ URL –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞:
- `https://mywishlist.online`

**‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è**
- `–æ—Ç–ø–∏—Å–∫–∞ john.doe@example.com`

**‚ùì –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å**
- `help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

---
üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç**: –ö–æ–≥–¥–∞ –¥–æ —á—å–µ–≥–æ-—Ç–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞—ë—Ç—Å—è 2 –Ω–µ–¥–µ–ª–∏, —è —Å–æ–∑–¥–∞—é –≥—Ä—É–ø–ø–æ–≤—É—é –±–µ—Å–µ–¥—É —Å–æ –≤—Å–µ–º–∏ –∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –∏ –¥–µ–ª—é—Å—å –∏—Ö —Å–ø–∏—Å–∫–æ–º –∂–µ–ª–∞–Ω–∏–π. –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ ""Birthday Commander"", —á—Ç–æ–±—ã –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –î–Ω—é –†–æ–∂–¥–µ–Ω–∏—è!

_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –ª—É—á—à–µ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã —è –±—ã–ª —É–≤–µ—Ä–µ–Ω —á—Ç–æ –ø–æ–º–Ω—é –µ–µ –≤–µ—Ä–Ω–æ <3_";
    }

    private async Task<string> HandleUnsubscribe(string subscriberEmail, List<string> commandParameters)
    {
        var employeeEmail = commandParameters[0];
        var isDeleted = await subscriptionService.Unsubscribe(subscriberEmail, employeeEmail);
        if (isDeleted)
        {
            return $"‚ôªÔ∏è Deleted subscription to {employeeEmail}";
        }

        {
            return $"üëÄ There is no subscription to {employeeEmail} for {subscriberEmail}.";
        }
    }

    private async Task<string> HandleSetBirthday(Guid employeeId, string dateStr)
    {
        if (string.IsNullOrEmpty(dateStr))
        {
            return "Please provide your birthday date.\n" +
                   "Example: `31.12.1990`";
        }

        try
        {
            var date = ParseBirthday(dateStr);
            await employeeService.UpdateBirthday(employeeId, date);
            
            return $"‚úÖ Your birthday has been set to **{date:dd MM yyyy}**!" +
                   "\nI'll notify your subscribers 2 weeks before your special day! üéâ";
        }
        catch (Exception ex)
        {
            return $"‚ùå Could not parse the date: {ex.Message}\n\n" +
                   "Please use format like:\n" +
                   "‚Ä¢ `31.12.1990` (with year)";
        }
    }

    private DateTime ParseBirthday(string dateStr)
    {
        if (!DateTime.TryParseExact(dateStr, "dd.MM.yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out var date))
        {
            throw new ArgumentException("Invalid date format");
        }

        return date;
    }

    private async Task<string> HandleSetWishlist(Guid employeeId, string url)
    {
        try
        {
            await employeeService.UpdateWishlist(employeeId, url);
                
            return $"‚úÖ Your wishlist has been updated!\n\n" +
                   $"üéÅ **Your wishlist**: {url}\n\n" +
                   "This will be shared with your birthday subscribers when your birthday approaches.";
        }
        catch (ValidationException ex)
        {
            return $"‚ùå {ex.Message}\n\n" +
                   "Please provide a valid URL starting with http:// or https://";
        }
    }

    private async Task<string> HandleShowSubscribers(Guid employeeId)
    {
        var subscribers = await employeeService.GetSubscribers(employeeId);
        var employee = await employeeService.GetById(employeeId);
        
        if (!subscribers.Any())
        {
            var noBirthdayMsg = employee.Birthday.HasValue 
                ? "" 
                : "\n\nüí° **Tip**: Set your birthday so people can subscribe to it!";
                    
            return "No one is subscribed to your birthday yet." + noBirthdayMsg;
        }
        
        var response = new StringBuilder();
        response.AppendLine("üéâ **Your Birthday Subscribers**");
        response.AppendLine();
        
        if (employee!.Birthday.HasValue)
        {
            response.AppendLine($"üìÖ Your birthday: **{employee.Birthday.Value:MMMM dd}**");
                
            var daysUntil = GetDaysUntilBirthday(employee.Birthday.Value);

            response.AppendLine($"üéÇ Coming up in **{daysUntil} days**!");
            response.AppendLine();
        }
        
        response.AppendLine("People who are subscribed to your birthday:");
        foreach (var subscriber in subscribers.OrderBy(s => s.Email))
        {
            response.AppendLine($"‚Ä¢ {subscriber.Email}");
        }
        
        response.AppendLine();
        response.AppendLine($"_Total: {subscribers.Count} subscriber{(subscribers.Count != 1 ? "s" : "")}_");

        if (string.IsNullOrEmpty(employee.WishlistLink))
        {
            response.AppendLine();
            response.AppendLine("üí° **Tip**: Add a wishlist URL so your subscribers know what you'd like!");
            response.AppendLine("To do so, just send me the link to your wishlist üëå");
        }
        
        return response.ToString();
    }
    
    private int GetDaysUntilBirthday(DateTime birthday)
    {
        var today = DateTime.Today;
        var next = new DateTime(today.Year, birthday.Month, birthday.Day);
            
        if (next < today)
            next = next.AddYears(1);
                
        return (next - today).Days;
    }

    private async Task<string> HandleShowSubscriptions(Guid employeeId)
    {
        var subscriptions = await employeeService.GetSubscriptions(employeeId);
            
        if (!subscriptions.Any())
        {
            return "You are not subscribed to anyone's birthday yet.\n\n" +
                   "To subscribe, just send me an email address: `john.doe@example.com`";
        }

        var response = new StringBuilder();
        response.AppendLine("üìÖ **Your Birthday Subscriptions**");
        response.AppendLine();
            
        var grouped = subscriptions
            .OrderBy(s => s.Birthday?.Month ?? 13)
            .ThenBy(s => s.Birthday?.Day ?? 32)
            .GroupBy(s => s.Birthday?.Month);

        foreach (var group in grouped)
        {
            if (group.Key.HasValue)
            {
                response.AppendLine($"**{CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(group.Key.Value)}**");
            }
            else
            {
                response.AppendLine("**No Birthday Set**");
            }

            foreach (var sub in group)
            {
                var birthdayStr = sub.Birthday?.ToString("MMM dd") ?? "Not set";
                var wishlistIcon = !string.IsNullOrEmpty(sub.WishlistLink) ? " üéÅ" : "";
                response.AppendLine($"‚Ä¢ {sub.Email} - {birthdayStr}{wishlistIcon}");
            }
            response.AppendLine();
        }

        response.AppendLine($"_Total: {subscriptions.Count} subscription{(subscriptions.Count != 1 ? "s" : "")}_");
            
        return response.ToString();
    }
}